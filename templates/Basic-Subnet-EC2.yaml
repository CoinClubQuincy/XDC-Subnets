AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Auto Scaling Group with Load Balancer in an Imported VPC

Parameters:
  ExistingVpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Enter the ID of an existing VPC.

  LoadBalancerSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Enter the IDs of the subnets where the Load Balancer will be deployed.

  Address:
    Type: String
    Description: Enter the address to be passed to the shell script.

  privateKey:
    Type: String
    Description: Enter the Key to be passed to the shell script. - [for TESTING PURPOSES ONLY]

  MinSize:
    Type: Number
    Description: The minimum size of the auto scaling group.

  MaxSize:
    Type: Number
    Description: The maximum size of the auto scaling group.

  DesiredCapacity:
    Type: Number
    Description: The desired capacity of the auto scaling group.

  instanceSize:
    Type: String
    Description: The size of the instance.
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge

Resources:
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP/HTTPS traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref ExistingVpcId

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !Split [ ",", !Join [ ",", !GetAZs "" ] ]
      LaunchConfigurationName:
        Ref: MyLaunchConfig
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier: !Ref LoadBalancerSubnets
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  MyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0827b6c5b977c020e
      InstanceType: !Ref instanceSize
      SecurityGroups:
        - !Ref MySecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install -y apache2
          sudo apt-get install ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings

          PARENTNET_WALLET=${Address}
          WALLET_PRIVATE_KEY=${privateKey}

          sudo apt-get update

          # Install packages to allow apt to use a repository over HTTPS
          sudo apt-get install \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release

          # Add Dockerâ€™s official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Set up the stable repository
          echo \
            "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Update the apt package index, and install Docker engine
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

          git clone https://github.com/XinFinOrg/XinFin-Node.git
          echo "Cloned XinFin-Node"

          cd XinFin-Node/subnet/deployment-generator/
          echo "Cloned XinFin-Node"

          cp script/docker.env.example docker.env
          echo "Created docker.env"

          # Update the env file
          NETWORK_NAME="xdcsubnet"
          NUM_MACHINE="1"
          NUM_SUBNET="3"
          MAIN_IP=$(curl -s ifconfig.me)
          PARENTNET="devnet"
          PARENTNET_WALLET_PK="0xe64996f74579Ed41674a26216F8ecf980494Dc38"
          WALLET_PRIVATE_KEY="34e2a295c63bb06aa47ab527856a6d4e10642c654e7a16b150ed39982da199c0"

          grep -q '^CONFIG_PATH=' docker.env || sed -i'' '1iCONFIG_PATH='"$PWD" docker.env
          sed -i "s|NETWORK_NAME=.*|NETWORK_NAME=$NETWORK_NAME|" docker.env
          sed -i "s|NUM_MACHINE=.*|NUM_MACHINE=$NUM_MACHINE|" docker.env
          sed -i "s|NUM_SUBNET=.*|NUM_SUBNET=$NUM_SUBNET|" docker.env
          sed -i "s|MAIN_IP=.*|MAIN_IP=$MAIN_IP|" docker.env
          sed -i "s|PARENTNET=.*|PARENTNET=$PARENTNET|" docker.env
          sed -i "s|PARENTNET_WALLET_PK=.*|PARENTNET_WALLET=$PARENTNET_WALLET_PK|" docker.env
          grep -q '^PARENTCHAIN_WALLET_PK=' docker.env || echo "PARENTCHAIN_WALLET_PK=$WALLET_PRIVATE_KEY" >> docker.env
          grep -q '^PRIVATE_KEY=' docker.env || echo "PRIVATE_KEY=$WALLET_PRIVATE_KEY" >> docker.env

          sudo docker pull xinfinorg/subnet-generator:latest

          sudo docker run --env-file docker.env -v $(pwd)/generated:/app/generated xinfinorg/subnet-generator:latest && cd generated

          sudo docker compose --env-file docker-compose.env --profile machine1 pull
          sudo docker compose --env-file docker-compose.env --profile machine1 up -d

          cd ../

          sudo docker run --env-file docker.env \
              -v $(pwd)/generated/deployment.json:/app/generated/deployment.json \
              --entrypoint 'bash' xinfinorg/subnet-generator:latest /app/start.sh

          cd generated

          sudo docker compose --env-file docker-compose.env --profile services pull
          sudo docker compose --env-file docker-compose.env --profile services up -d
          
    DependsOn: MySecurityGroup 

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        !Ref LoadBalancerSubnets 
      SecurityGroups:
        - !Ref MySecurityGroup
    DependsOn: MySecurityGroup 

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ExistingVpcId

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
      LoadBalancerArn:
        Ref: MyLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt MyLoadBalancer.DNSName